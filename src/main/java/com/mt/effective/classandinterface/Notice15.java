package com.mt.effective.classandinterface;

/**
 * @author mt 2018.8.15
 * 第15条 使可变性最小化
 * 不可变类只是其实例不能被修改的类.(根据实践来看,不可变类必须使用final修饰符)
 * 例如标准类库中的String 基本类型的包装类型 BigInteger BigDecimal
 * 使类成为不可变的类,要遵循如下的规则
 * 1.不要提供任何会修改对象状态的方法(即mutator)
 * 2.保证类不会被扩展(最有效的方式就是使用final)
 * 3.使所有的域都是final的(类是final的只能保证所有的方法是final)
 * 4.使所有的域都是私有的
 * 5.确保对于任何可变组件的互斥访问.(如果类具有指向可变对象的域,则必须确保其他类无法获得指向这些对象的引用
 *   也不要使用其他类体用的对象来初始化这些域)
 * 大多数的不可变类都采取了函数的做法:
 *   例如:String对象,操作一个String,得到的都是一个新的String对象.
 *   即不是修改这个实例,而是返回一个全新的String
 * 总而言之,尽可能地使类不可变,如果类不能被设计成不可变的,那么也要
 * 尽可能的限制它的可变性.
 */
public class Notice15 {

}
